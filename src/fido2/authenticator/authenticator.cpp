#include <memory>

#include <Arduino.h>

#include "fido2/authenticator/authenticator.h"

#include "display/display.h"

namespace FIDO2
{
    namespace Authenticator
    {
        const FIDO2::UUID aaguid("63d9df31-662d-476a-a7a7-53b6aa038975");

        const uint8_t certificate[] = {
            0x30, 0x82, 0x03, 0x11, 0x30, 0x82, 0x02, 0xb7, 0xa0, 0x03, 0x02, 0x01,
            0x02, 0x02, 0x01, 0x01, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
            0x3d, 0x04, 0x03, 0x02, 0x30, 0x81, 0x92, 0x31, 0x0b, 0x30, 0x09, 0x06,
            0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31, 0x0c, 0x30, 0x0a,
            0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x03, 0x4e, 0x52, 0x57, 0x31, 0x0f,
            0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x06, 0x4b, 0x61, 0x61,
            0x72, 0x73, 0x74, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x0a,
            0x0c, 0x08, 0x55, 0x52, 0x55, 0x20, 0x41, 0x75, 0x74, 0x68, 0x31, 0x11,
            0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x08, 0x55, 0x52, 0x55,
            0x20, 0x43, 0x61, 0x72, 0x64, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55,
            0x04, 0x03, 0x0c, 0x0b, 0x75, 0x72, 0x75, 0x61, 0x75, 0x74, 0x68, 0x2e,
            0x63, 0x6f, 0x6d, 0x31, 0x28, 0x30, 0x26, 0x06, 0x09, 0x2a, 0x86, 0x48,
            0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x19, 0x61, 0x6e, 0x64, 0x72,
            0x65, 0x77, 0x2e, 0x6f, 0x76, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x76, 0x40,
            0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x20, 0x17,
            0x0d, 0x32, 0x30, 0x30, 0x38, 0x31, 0x31, 0x31, 0x32, 0x34, 0x35, 0x34,
            0x30, 0x5a, 0x18, 0x0f, 0x32, 0x30, 0x37, 0x30, 0x30, 0x37, 0x33, 0x30,
            0x31, 0x32, 0x34, 0x35, 0x34, 0x30, 0x5a, 0x30, 0x81, 0x92, 0x31, 0x0b,
            0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31,
            0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x03, 0x4e, 0x52,
            0x57, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x06,
            0x4b, 0x61, 0x61, 0x72, 0x73, 0x74, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03,
            0x55, 0x04, 0x0a, 0x0c, 0x08, 0x55, 0x52, 0x55, 0x20, 0x41, 0x75, 0x74,
            0x68, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x08,
            0x55, 0x52, 0x55, 0x20, 0x43, 0x61, 0x72, 0x64, 0x31, 0x14, 0x30, 0x12,
            0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0b, 0x75, 0x72, 0x75, 0x61, 0x75,
            0x74, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x31, 0x28, 0x30, 0x26, 0x06, 0x09,
            0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x19, 0x61,
            0x6e, 0x64, 0x72, 0x65, 0x77, 0x2e, 0x6f, 0x76, 0x63, 0x68, 0x61, 0x72,
            0x6f, 0x76, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
            0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,
            0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
            0x42, 0x00, 0x04, 0x6f, 0x84, 0xa1, 0xfc, 0x8f, 0xae, 0xbc, 0x23, 0x43,
            0x46, 0xb9, 0x15, 0xba, 0xe7, 0x22, 0x47, 0x20, 0x07, 0x18, 0x34, 0x70,
            0x2e, 0x81, 0x28, 0x84, 0x11, 0x64, 0x8f, 0x4f, 0x7d, 0x87, 0x90, 0x76,
            0xed, 0xe1, 0x16, 0x80, 0x09, 0x77, 0x78, 0x0f, 0xc7, 0xc4, 0x1c, 0x66,
            0x3b, 0xba, 0x26, 0xde, 0xbf, 0x4a, 0x94, 0x45, 0x21, 0xba, 0xbe, 0x54,
            0xc9, 0x65, 0xb1, 0xdd, 0x67, 0xf4, 0x8d, 0xa3, 0x81, 0xf9, 0x30, 0x81,
            0xf6, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14,
            0xab, 0x02, 0xae, 0x16, 0x76, 0x4e, 0x6f, 0x68, 0xc2, 0x50, 0x0b, 0x53,
            0xc2, 0xbd, 0xaf, 0x60, 0xc5, 0xec, 0x8c, 0xbf, 0x30, 0x81, 0xbc, 0x06,
            0x03, 0x55, 0x1d, 0x23, 0x04, 0x81, 0xb4, 0x30, 0x81, 0xb1, 0xa1, 0x81,
            0x98, 0xa4, 0x81, 0x95, 0x30, 0x81, 0x92, 0x31, 0x0b, 0x30, 0x09, 0x06,
            0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x44, 0x45, 0x31, 0x0c, 0x30, 0x0a,
            0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x03, 0x4e, 0x52, 0x57, 0x31, 0x0f,
            0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x06, 0x4b, 0x61, 0x61,
            0x72, 0x73, 0x74, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x0a,
            0x0c, 0x08, 0x55, 0x52, 0x55, 0x20, 0x41, 0x75, 0x74, 0x68, 0x31, 0x11,
            0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x08, 0x55, 0x52, 0x55,
            0x20, 0x43, 0x61, 0x72, 0x64, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55,
            0x04, 0x03, 0x0c, 0x0b, 0x75, 0x72, 0x75, 0x61, 0x75, 0x74, 0x68, 0x2e,
            0x63, 0x6f, 0x6d, 0x31, 0x28, 0x30, 0x26, 0x06, 0x09, 0x2a, 0x86, 0x48,
            0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x19, 0x61, 0x6e, 0x64, 0x72,
            0x65, 0x77, 0x2e, 0x6f, 0x76, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x76, 0x40,
            0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x82, 0x14, 0x65,
            0x68, 0xdc, 0x41, 0xf1, 0x4e, 0x98, 0x8b, 0x8f, 0xe4, 0xd5, 0x40, 0xa9,
            0x00, 0x14, 0xd1, 0x69, 0x00, 0x17, 0xb3, 0x30, 0x09, 0x06, 0x03, 0x55,
            0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d,
            0x0f, 0x04, 0x04, 0x03, 0x02, 0x04, 0xf0, 0x30, 0x0a, 0x06, 0x08, 0x2a,
            0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45,
            0x02, 0x20, 0x74, 0xbb, 0xd5, 0x22, 0xf7, 0xaf, 0xb5, 0xc2, 0x12, 0x4a,
            0x2b, 0xd4, 0x23, 0x9f, 0xa4, 0xa4, 0xf7, 0x87, 0x5d, 0x18, 0x0f, 0x8d,
            0x18, 0x8d, 0x83, 0xe6, 0x90, 0xdc, 0xc7, 0x60, 0x6f, 0x9b, 0x02, 0x21,
            0x00, 0x9b, 0x40, 0xae, 0xcf, 0x0c, 0x6e, 0x9f, 0xc1, 0x6c, 0x92, 0xc8,
            0xe4, 0x4d, 0x71, 0x05, 0x85, 0x92, 0xd9, 0xcb, 0x42, 0xd3, 0xf0, 0xdd,
            0xe4, 0x02, 0x3d, 0x63, 0x1c, 0x77, 0x76, 0x30, 0x31};

        const size_t certificateSize = sizeof(certificate);

        Crypto::ECDSA::PrivateKey agreementKey = {};

        void reset()
        {
        }

        void powerUp()
        {
            Serial.println("FIDO2 Authenticator Power Up procedure");

            esp_fill_random(agreementKey.key, 32);

            esp_fill_random(pinUvAuthToken, 16);
        }

        static Status status = STATUS_IDLE;

        uint8_t getStatus()
        {
            return (uint8_t)status;
        }

        void setStatus(Status _status)
        {
            status = _status;
        }

        FIDO2::CTAP::Status processRequest(const FIDO2::CTAP::Command *request, std::unique_ptr<FIDO2::CTAP::Command> &response)
        {
            status = STATUS_PROCESSING;

            Display::enableIcon(ICON_PROCESSING);

            FIDO2::CTAP::Status ret = FIDO2::CTAP::CTAP1_ERR_INVALID_COMMAND;
            switch (request->getCommandCode())
            {
            case FIDO2::CTAP::authenticatorGetInfo:
                ret = processRequest(static_cast<const FIDO2::CTAP::Request::GetInfo *>(request), response);
                break;
            case FIDO2::CTAP::authenticatorGetAssertion:
                ret = processRequest((const FIDO2::CTAP::Request::GetAssertion *)request, response);
                break;
            case FIDO2::CTAP::authenticatorMakeCredential:
                ret = processRequest((const FIDO2::CTAP::Request::MakeCredential *)request, response);
                break;
            case FIDO2::CTAP::authenticatorClientPIN:
                ret = processRequest((const FIDO2::CTAP::Request::ClientPIN *)request, response);
                break;
            case FIDO2::CTAP::authenticatorReset:
                ret = processRequest((const FIDO2::CTAP::Request::Reset *)request, response);
                break;
            default:
                Serial.print("\n# Unknown command: ");
                Serial.println(request->getCommandCode());
                break;
            }

            Display::disableIcon(ICON_PROCESSING);

            status = STATUS_IDLE;

            return ret;
        }

    } // namespace Authenticator
} // namespace FIDO2